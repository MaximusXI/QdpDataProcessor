const functions = require('@google-cloud/functions-framework');
const { PubSub } = require('@google-cloud/pubsub');
const AWS = require('aws-sdk');
const pubsub = new PubSub();
const jwt = require('jsonwebtoken');
// functions.http('helloHttp', (req, res) => {
//     res.set('Access-Control-Allow-Origin', "*")
//   res.set('Access-Control-Allow-Methods', 'GET, POST');
//   res.send(`Hello ${req.query.name || req.body.name || 'World'}!`);
// });
AWS.config.update({
  region: 'us-east-1', // Replace with your Cognito user pool's region
  accessKeyId: process.env.AWS_ACCESS_KEY_ID, // Store securely in environment variables
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY, // Store securely in environment variables
  sessionToken: process.env.SESSION_TOKEN
});
const dynamoDb = new AWS.DynamoDB.DocumentClient();
exports.publishMessage = async (req, res) => {
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'POST');
  res.set('Access-Control-Allow-Headers', 'Authorization, Content-Type');
  console.log('!!!!!!!!!!!!!@@@@@@@@@@@@@@@@@@@@@2')
  console.log('The Request is:');
  console.log(req);
  console.log(req.body);
  if (req.method === 'OPTIONS') {
    res.status(204).send('');
    return;
  }
  // Extract Authorization header
  const authHeader = req.get('Authorization');
  if (!authHeader) {
    return res.status(401).send('Authorization header is missing');
  }
  console.log(authHeader);
  // If the token is of type "Bearer <token>" Then this will be applicable >> authHeader.split(' ')[1];
  const token = authHeader; // Assuming "<token>"
  let userId;
  
//res.send(`Hello ${req.query.name || req.body.name || 'World'}!`);
  // Proceed with your Cloud Function logic
const topicName = 'support';
  //const message = req.body.message; // message from the client

  if (!req.body) {
    return res.status(400).send('Message is required');
  }

  const referenceCode = req.body.referenceCode;
  console.log(referenceCode);
  const checkParams = {
    TableName: 'supportQueries',
    KeyConditionExpression: 'referenceCode = :referenceCodeVal',
    ExpressionAttributeValues: {
      ':referenceCodeVal': referenceCode,
    },
    Limit: 1
  };

  try {
    const decodedToken = jwt.decode(token);
    console.log('Decoded token is:')
    console.log(decodedToken);
    userId = decodedToken?.email;
    if (!userId) {
      throw new Error('User ID not found in token');
    }

    const recordForReferenceCode = await dynamoDb.query(checkParams).promise();
    console.log(recordForReferenceCode);
    if (recordForReferenceCode.Items && recordForReferenceCode.Items.length > 0) {
      console.log(`Record with referenceCode ${referenceCode} already exists. Skipping insertion.`);
      return res.status(400).send(`Support already in progress for reference Code ${referenceCode}`);
    }
    const topic = pubsub.topic(topicName);
    const messagePayload = {
      ...req.body,
      userId // Add the extracted userId (email) to the message
    };
    console.log('The message body that will be published is:');
    console.log(messagePayload);
    const messageBuffer = Buffer.from(JSON.stringify(messagePayload));
    await topic.publish(messageBuffer);
    console.log("###############Success");
    return res.status(200).send(`Message published to ${topicName}`);
  } catch (error) {
    console.error('Error publishing message:', error);
    return res.status(500).send('Error publishing message');
  }
};

